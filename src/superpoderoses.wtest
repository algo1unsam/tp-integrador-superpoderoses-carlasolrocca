import superpoderoses.*

describe "Superpoderoses" {
//Nada andaba si dejaba a todo como const. Lo cambie
	var altaVelocidad
	var superVelocidad
	var vueloRasante
	var vueloAlto
	var vueloRasanteAmplificado
	var superVelocidadAmplificada
	
	var capitanaPatriaGrande
	var plusvaliaCero
	var usinaDeDerechos
	
	var cooperativaJusticiera
	
	var peligroSencillo
	var peligroSencilloRadiactivo 
	var peligroModerado
	var peligroAlto
	
	var fragmentadorMonopolios
	var educadorPublico
		
	
	method initialize(){
				
// Punto 1
// Poderes y Personajes
		altaVelocidad = new Velocidad(rapidez = 2)
		superVelocidad = new Velocidad(rapidez = 3)
		vueloRasante = new Vuelo(alturaMax= 10, energiaDespegue= 10)
		vueloAlto = new Vuelo(alturaMax= 300, energiaDespegue= 200)
		vueloRasanteAmplificado = new PoderAmplificador(poderBase= vueloRasante, nroAmplificador= 4)
		superVelocidadAmplificada = new PoderAmplificador(poderBase= superVelocidad, nroAmplificador= 3)
	
		capitanaPatriaGrande = new Personaje(espiritualidad= 5, estrategia= 3, poderes= [superVelocidadAmplificada, vueloAlto])
		plusvaliaCero = new Personaje(espiritualidad= 4, estrategia= 2, poderes= [altaVelocidad, vueloRasanteAmplificado])
		usinaDeDerechos = new Personaje(espiritualidad= 6, estrategia= 1, poderes= [vueloRasante])
		
// Punto 2
// Equipo 
		cooperativaJusticiera = new Equipo(miembros= [capitanaPatriaGrande, plusvaliaCero, usinaDeDerechos])

		
// Punto 3 y Punto 4
// Peligros
		// TODO: constrir/obtener un peligro con capacidad de batalla = 30 y NO tiene desechos radiactivos 
		peligroSencillo = new Peligro(capacidadBatalla= 30, desechosRadiactivos= false, nivelComplejidad= 1, personajesQueSeBanca= 2) 
		// TODO: constrir/obtener un peligro con capacidad de batalla = 30 y tiene desechos radiactivos
		peligroSencilloRadiactivo = new Peligro(capacidadBatalla= 30, desechosRadiactivos= true, nivelComplejidad= 1, personajesQueSeBanca= 2) 
		// TODO: constrir/obtener un peligro con capacidad de batalla = 50 y NO tiene desechos radiactivos
		peligroModerado = new Peligro(capacidadBatalla= 50, desechosRadiactivos= false, nivelComplejidad= 2, personajesQueSeBanca= 1) 
		// TODO: constrir/obtener un peligro con capacidad de batalla = 400 y tiene desechos radiactivos
		peligroAlto = new Peligro(capacidadBatalla= 400, desechosRadiactivos= true, nivelComplejidad= 3, personajesQueSeBanca= 2) 

/*
// Punto 5 
		fragmentadorMonopolios = null // TODO: constrir/obtener un Metahumano con estrategia = 1, espiritualidad = 6 y poderes = vueloRasante
		educadorPublico = null // TODO: constrir/obtener un Mago con poder acumulado = 12, estrategia = 1, espiritualidad = 6 y poderes = vueloRasante	
}
*/	
	
	test "punto 1.1 capacidad de batalla que aporta un poder" {
		// TODO: Verificar que la capacidad de batalla que le aporta superVelocidadAmplificada a capitanaPatriaGrande es 576
		assert.equals(576, superVelocidadAmplificada.capacidadBatalla(capitanaPatriaGrande))
		
		// TODO: Verificar que la capacidad de batalla que le aporta vueloAlto a capitanaPatriaGrande es 876
		assert.equals(876, vueloAlto.capacidadBatalla(capitanaPatriaGrande))
		
		// TODO: Verificar que la capacidad de batalla que le aporta altaVelocidad a plusvaliaCero es 72
		assert.equals(72, altaVelocidad.capacidadBatalla(plusvaliaCero))
		
		// TODO: Verificar que la capacidad de batalla que le aporta vueloRasanteAmplificado a plusvaliaCero es 144
		assert.equals(144, vueloRasanteAmplificado.capacidadBatalla(plusvaliaCero))
		
		// TODO: Verificar que la capacidad de batalla que le aporta vueloRasante a usinaDeDerechos es 49
		assert.equals(49, vueloRasante.capacidadBatalla(usinaDeDerechos))
	}
	
	test "punto 1.2 capacidad de batalla de un personaje" {
		// TODO: Verificar que la capacidad de batalla de capitanaPatriaGrande es 1452
		assert.equals(1452, capitanaPatriaGrande.capacidadBatalla())
		// TODO: Verificar que la capacidad de batalla de plusvaliaCero es 216
		assert.equals(216, plusvaliaCero.capacidadBatalla())
		// TODO: Verificar que la capacidad de batalla de usinaDeDerechos es 49
		assert.equals(49, usinaDeDerechos.capacidadBatalla())
	}

	test "punto 2.1 Saber el miembro vulnerable de un equipo" {
		// TODO: Verificar que miembro mas vulnerable de cooperativaJusticiera es usinaDeDerechos
		assert.equals(usinaDeDerechos, cooperativaJusticiera.miembroVulnerable())
	}

	test "punto 2.2 Saber la calidad de un equipo" {
		// TODO: Verificar que la calidad de cooperativaJusticiera es 572.33333
		assert.equals(572.33333, cooperativaJusticiera.calidadEquipo())
	}	

	test "punto 2.3 Saber los mejores poderes de un equipo" {
		// TODO: Verificar que los mejores poderes de cooperativaJusticiera son vueloAlto, vueloRasanteAmplificado y vueloRasante
		assert.equals([vueloAlto, vueloRasanteAmplificado, vueloRasante], cooperativaJusticiera.mejoresPoderes())
	}


	test "punto 3.1 personajes contra el peligro" {
		// TODO: Verificar que peligroSencillo puede ser afrontado por capitanaPatriaGrande
		assert.that(capitanaPatriaGrande.enfrentaPeligro(peligroSencillo))
		// TODO: Verificar que peligroSencillo puede ser afrontado por plusvaliaCero
		assert.that(plusvaliaCero.enfrentaPeligro(peligroSencillo))
		// TODO: Verificar que peligroSencillo puede ser afrontado por usinaDeDerechos
		assert.that(usinaDeDerechos.enfrentaPeligro(peligroSencillo))
		
		// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por capitanaPatriaGrande
		assert.that(capitanaPatriaGrande.enfrentaPeligro(peligroSencilloRadiactivo))
		// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por plusvaliaCero
		assert.that(plusvaliaCero.enfrentaPeligro(peligroSencilloRadiactivo))
		// TODO: Verificar que peligroSencilloRadiactivo NO puede ser afrontado por usinaDeDerechos
		assert.notThat(usinaDeDerechos.enfrentaPeligro(peligroSencilloRadiactivo))
		
		// TODO: Verificar que peligroModerado puede ser afrontado por capitanaPatriaGrande
		assert.that(capitanaPatriaGrande.enfrentaPeligro(peligroModerado))
		// TODO: Verificar que peligroModerado puede ser afrontado por plusvaliaCero
		assert.that(plusvaliaCero.enfrentaPeligro(peligroModerado))
		// TODO: Verificar que peligroModerado NO puede ser afrontado por usinaDeDerechos
		assert.notThat(usinaDeDerechos.enfrentaPeligro(peligroModerado))
	
		// TODO: Verificar que peligroAlto puede ser afrontado por capitanaPatriaGrande
		assert.that(capitanaPatriaGrande.enfrentaPeligro(peligroAlto))
		// TODO: Verificar que peligroAlto NO puede ser afrontado por plusvaliaCero
		assert.notThat(plusvaliaCero.enfrentaPeligro(peligroAlto))
		// TODO: Verificar que peligroAlto NO puede ser afrontado por usinaDeDerechos
		assert.notThat(usinaDeDerechos.enfrentaPeligro(peligroAlto))
	}
		

	test "punto 3.2 Saber si un peligro es sensato " {
		// TODO: Verificar que peligroSencillo es sensato para cooperativaJusticiera
		assert.that(cooperativaJusticiera.afrontaPeligro(peligroSencillo))
		// TODO: Verificar que peligroSencilloRadiactivo NO es sensato para cooperativaJusticiera
		assert.notThat(cooperativaJusticiera.afrontaPeligro(peligroSencilloRadiactivo))
		// TODO: Verificar que peligroModerado NO es sensato para cooperativaJusticiera
		assert.notThat(cooperativaJusticiera.afrontaPeligro(peligroModerado))
		// TODO: Verificar que peligroAlto NO es sensato para cooperativaJusticiera
		assert.notThat(cooperativaJusticiera.afrontaPeligro(peligroAlto))
	}

	
	test "punto 4.1 Afrontar peligro individualmente: OK" {
		// TODO: Hacer que usinaDeDerechos afronte a peligroSencillo 
		usinaDeDerechos.enfrentar(peligroSencillo)
		// TODO: Verificar que la estrategia de usinaDeDerechos es 2
		assert.equals(2, usinaDeDerechos.estrategia())
	}

	test "punto 4.1 Afrontar peligro individualmente: no OK por radioactividad" {
		// TODO: Hacer que usinaDeDerechos afronte a peligroSencilloRadiactivo (NO SE PUEDE!)
		assert.throwsException({usinaDeDerechos.enfrentar(peligroSencilloRadiactivo)})
		// TODO: Verificar que la estrategia de usinaDeDerechos es 1
		assert.equals(1, usinaDeDerechos.estrategia())
	}

	test "punto 4.1 Afrontar peligro individualmente: no OK por capacidad de batalla" {
		// TODO: Hacer que usinaDeDerechos afronte a peligroModerado (NO SE PUEDE!)
		assert.throwsException({usinaDeDerechos.enfrentar(peligroModerado)})
		// TODO: Verificar que la estrategia de usinaDeDerechos es 1
		assert.equals(1, usinaDeDerechos.estrategia())
	}

	test "punto 4.2  Afrontar peligro (moderado) en equipo  " {
		// TODO: Hacer que cooperativaJusticiera afronte a peligroModerado
		cooperativaJusticiera.enfrentar(peligroModerado)
		// TODO: Verificar que la estrategia de capitanaPatriaGrande es 5
		assert.equals(5, capitanaPatriaGrande.estrategia())
		// TODO: Verificar que la estrategia de plusvaliaCero es 4
		assert.equals(4, plusvaliaCero.estrategia())
		// TODO: Verificar que la estrategia de usinaDeDerechos es 1
		assert.equals(1, usinaDeDerechos.estrategia())		
	}

	test "punto 4.2  Afrontar peligro (alto) en equipo (no ok)" {
		// TODO: Hacer que cooperativaJusticiera afronte a peligroAlto (NO SE PUEDE!)
		assert.throwsException({cooperativaJusticiera.enfrentar(peligroAlto)})
		// TODO: Verificar que la estrategia de capitanaPatriaGrande es 3
		assert.equals(3, capitanaPatriaGrande.estrategia())
		// TODO: Verificar que la estrategia de plusvaliaCero es 2
		assert.equals(2, plusvaliaCero.estrategia())
		// TODO: Verificar que la estrategia de usinaDeDerechos es 1
		assert.equals(1, usinaDeDerechos.estrategia())
	}
	

/*
	test "punto 5.1  Metahumano " {
		// TODO: Verificar que la capacidad de batalla de fragmentadorMonopolios es 98
		// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por fragmentadorMonopolios
		// TODO: Hacer que fragmentadorMonopolios afronte a peligroSencilloRadiactivo
		// TODO: Verificar que la estrategia de fragmentadorMonopolios es 2
		// TODO: Verificar que la espiritualidad de fragmentadorMonopolios es 7
		// TODO: Verificar que peligroAlto NO puede ser afrontado por fragmentadorMonopolios
		// TODO: Hacer que fragmentadorMonopolios afronte a peligroAlto (NO SE PUEDE!)
	}
 */

/*
	test "punto 5.2  Mago " {
		// TODO: Verificar que la capacidad de batalla de educadorPublico es 110
		// TODO: Verificar que peligroAlto NO puede ser afrontado por educadorPublico
		// TODO: Hacer que educadorPublico afronte a peligroAlto (NO SE PUEDE!)

		// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por educadorPublico
		// TODO: Hacer que educadorPublico afronte a peligroSencilloRadiactivo
		// TODO: Verificar que la estrategia de educadorPublico es 2
		// TODO: Verificar que la espiritualidad de educadorPublico es 7
		// TODO: Verificar que el poder acumulado de educadorPublico es 7
		
		// TODO: Hacer que educadorPublico afronte a peligroSencilloRadiactivo
		// TODO: Verificar que la estrategia de educadorPublico es 2
		// TODO: Verificar que la espiritualidad de educadorPublico es 7
		// TODO: Verificar que el poder acumulado de educadorPublico es 2
	}
 */
}
